using Xunit;

namespace Vee.Tests
{
    public class KeccakRoundsTests
    {
        [Fact]
        public void PikachuStatePermitation()
        {
            var input = new byte[]
            {
                0x70, 0x69, 0x6b, 0x61, 0x63, 0x68, 0x75, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };
            var packed = BitHacker.ToStateArray(input);
            
            var hash = KeccakRounds.Iterate(packed);
            var unpacked = BitHacker.ToPlainState(hash).ToArray();

            var expectation = new byte[]
            {
                0x93, 0x78, 0x40, 0x94, 0xc0, 0xb4, 0x96, 0x9c, 0xf4, 0x40, 0x1b, 0xbf, 0xcf, 0x70, 0xf8, 0x77, 0xa5,
                0xf7, 0x0a, 0x1f, 0x99, 0x84, 0x3c, 0xb6, 0xeb, 0x88, 0x2b, 0x6a, 0xa2, 0x07, 0xad, 0x0d, 0x8a, 0x26,
                0x4a, 0x8a, 0xb6, 0x24, 0xe8, 0x99, 0x5c, 0x14, 0x36, 0x1f, 0xea, 0x61, 0x88, 0x93, 0xe3, 0x8f, 0x6c,
                0x20, 0x6f, 0x77, 0x16, 0x21, 0xca, 0x04, 0xe5, 0x62, 0x9d, 0xd9, 0x89, 0xe3, 0xcb, 0xe1, 0xa8, 0x91,
                0xc6, 0xba, 0x9a, 0xbd, 0x5f, 0xa9, 0xad, 0xc3, 0x1e, 0x6d, 0x34, 0xbd, 0x45, 0x1b, 0x8e, 0x91, 0x29,
                0x49, 0x53, 0x45, 0x79, 0x02, 0x32, 0x9f, 0x80, 0x6b, 0x1a, 0x9a, 0x31, 0x2f, 0xc6, 0xb8, 0xc6, 0x91,
                0x7f, 0x83, 0x77, 0xfe, 0xd0, 0xb5, 0x37, 0x4d, 0x37, 0x4b, 0x2a, 0xe8, 0x48, 0xb4, 0xff, 0xd9, 0xf6,
                0x77, 0xae, 0x15, 0x09, 0x11, 0x3d, 0x49, 0xc3, 0x55, 0x31, 0xcc, 0x9c, 0x76, 0x34, 0xa7, 0xee, 0xa9,
                0x40, 0xce, 0x04, 0x08, 0xd7, 0xd4, 0x28, 0x51, 0xbf, 0x8b, 0x4f, 0x32, 0xe0, 0xf2, 0x82, 0xeb, 0x22,
                0xa4, 0xea, 0x9c, 0xcc, 0x80, 0xd7, 0xbc, 0x79, 0x85, 0x98, 0xa7, 0xee, 0x1d, 0xa7, 0xb4, 0xc3, 0xde,
                0x1d, 0x83, 0xfb, 0x53, 0x91, 0x01, 0xe3, 0x35, 0xe4, 0x0d, 0x53, 0xdd, 0xca, 0xb9, 0x0d, 0xad, 0xe7,
                0xdc, 0x49, 0x5e, 0x18, 0x50, 0x20, 0xcf, 0xbd, 0x86, 0xf6, 0x28, 0x73, 0xf1
            };

            Assert.Equal(expectation, unpacked);
        }
    }
}