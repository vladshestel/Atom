using Xunit;

namespace Vee.Tests
{
    public class PiTests
    {
        [Fact]
        public void PiRoundZero()
        {
            var input = new byte[]
            {
                0x71, 0x69, 0x6b, 0x61, 0x63, 0x68, 0x75, 0x06, 0xe0, 0xd2, 0xd6, 0xc2, 0xc6, 0xd0, 0xea, 0x0c,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x86, 0x56, 0x67, 0x00, 0x97, 0xb6, 0x16, 0x36, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
                0x16, 0x36, 0x86, 0x56, 0x67, 0x00, 0x97, 0xb6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xad, 0xce, 0x00, 0x2e, 0x6d, 0x2d, 0x6c, 0x0c,
                0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xc0, 0xa5, 0xad, 0x85, 0x8d, 0xa1, 0xd5,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x61, 0x63, 0x68, 0x75, 0x06, 0x70, 0x69, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                0x2d, 0x6c, 0x0c, 0xad, 0xce, 0x10, 0x2e, 0x6d, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xe0, 0xd2, 0xd6, 0xc2, 0xc6, 0xd0, 0xea,
                0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa5, 0xad, 0x85, 0x8d, 0xa1, 0xd5, 0x19,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x3a, 0x03, 0xb8, 0xb4, 0xb5, 0xb0, 0x31, 0xb4
            };
            var packed = BitHacker.ToStateArray(input);
            
            var hash = Permutations.Pi(packed);
            var unpacked = BitHacker.ToPlainState(hash).ToArray();

            var expectation = new byte[]
            {
                0x71, 0x69, 0x6b, 0x61, 0x63, 0x68, 0x75, 0x06, 0x16, 0x36, 0x86, 0x56, 0x67, 0x00, 0x97, 0xb6,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x3a, 0x03, 0xb8, 0xb4, 0xb5, 0xb0, 0x31, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xad, 0xce, 0x00, 0x2e, 0x6d, 0x2d, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x2d, 0x6c, 0x0c, 0xad, 0xce, 0x10, 0x2e, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
                0xe0, 0xd2, 0xd6, 0xc2, 0xc6, 0xd0, 0xea, 0x0c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xe0, 0xd2, 0xd6, 0xc2, 0xc6, 0xd0, 0xea,
                0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x56, 0x67, 0x00, 0x97, 0xb6, 0x16, 0x36,
                0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x19, 0xc0, 0xa5, 0xad, 0x85, 0x8d, 0xa1, 0xd5,
                0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x61, 0x63, 0x68, 0x75, 0x06, 0x70, 0x69, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                0xc0, 0xa5, 0xad, 0x85, 0x8d, 0xa1, 0xd5, 0x19
            };

            Assert.Equal(expectation, unpacked);
        }
    }
}